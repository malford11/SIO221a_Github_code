function [df] = Class10(ChunkSize)
%Class10 Plots mean spectrum
load class10_record.mat %load data
df = class10_record;
df.dnum = datevec(df.time);
NChunks = floor(length(df.time) / ChunkSize); %calc number of chunks
df.data = detrend(df.data); %detrend data
df.Chunks = reshape(df.data,ChunkSize,NChunks);
N=size(df.Chunks);
% % % N=N(1); %this is the same as chunk size
% % % dt=(30/60)/24; %in cycles per day
% % % T=dt*N;
% % % dfft=1/T;
% % % fn=1/2/dt;
% % % f_vector=-fn:dfft:(fn-dfft);
% % % df.fft = fftshift(fft(df.Chunks));
% % % df.fft_norm = df.fft / (NChunks^2) * ChunkSize; %normalize
% % % df.spectra = mean(df.fft_norm,2); %mean

p = ChunkSize;
a=fft(df.Chunks);  % this computes the fft for each column
amp=abs(a(1:p/2+1,:)).^2;
dt=(30/60)/24; %30 min in cycles per day
T=dt*p;
df=1/T;
fn=1/2/dt;
frqvector=0:df:fn; %frequency vector, cpd, goes from 0 to Nyquist.
% Normalize as above
amp = amp / p.^2; % first correct for the MATLAB normalization
amp = amp .* 2; %we threw out half of the spectrum; so correct for the lost variance.
amp = amp / df; % this is then the definition of the spectrum
spectra = nanmean(amp,2);


%Parsevals Theorem
variance = var(df.data);
sumspec = sum(df.spectra) * dt;
df.parseval = variance/sumspec;

% fig = figure(1);
plot(f_vector,abs(df.spectra))
xlabel('Cycles per Day')
ylabel('Fourier Amplitude')
title(['Mean fft for ', num2str(NChunks), ' Chunks of ', num2str(N), ' Data Points'])
end

